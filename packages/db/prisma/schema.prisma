// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String              @id @default(cuid())
  name                     String?
  email                    String              @unique
  emailVerified            DateTime?
  image                    String?
  isOnboardingCompleted    Boolean @default(false)
  accounts                 Account[]
  sessions                 Session[]
  post                     Post[]
  idea                     Idea[]
  channel                  Channel[]
  githubRepository         GithubRepository[]
  githubIntegration        GithubIntegration[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model GithubIntegration {
  id             String  @id @default(cuid())
  installationId String  @unique
  userId         String
  isActive       Boolean

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GithubRepository {
  id                  String          @id @default(cuid())
  repositoryUrl       String
  fullName            String
  repoId              String          @unique
  defaultBranch       String
  language            String?
  repositoryUpdatedAt String
  userId              String
  idea                Idea[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Idea {
  id                 String    @id @default(cuid())
  title              String
  content            String
  isArchived         Boolean
  userId             String
  githubRepositoryId String?

  githubRepository GithubRepository? @relation(fields: [githubRepositoryId], references: [id]) 
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id                String    @id @default(cuid())
  userId            String
  postOnChannel     PostOnChannel[]

  user  User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Channel {
  id                    String          @id @default(cuid())
  platform              Platform
  accessToken           String
  refreshToken          String?
  accessTokenExpiresIn  DateTime
  platformUserId        String @unique
  platformUserName      String?
  platformUserImg       String?
  platformUserEmail     String?
  userId                String
  isActive              Boolean
  postOnChannel         PostOnChannel[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostOnChannel {
  channelId       String
  projectUpdateId String

  postTitle       String
  postContent     String
  postScheduledAt DateTime?
  postPublishedAt DateTime?
  postStatus      PostStatus

  channel Channel @relation(fields: [channelId], references: [id])
  post Post @relation(fields: [projectUpdateId], references: [id])

  @@id([channelId, projectUpdateId])
}

enum PostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  FAILED
}

enum Platform {
  TWITTER
  LINKEDIN
}