// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String              @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  projects           Project[]
  projectUpdates     ProjectUpdate[]
  channel            Channel[]
  githubInstallation GithubIntegration[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GithubIntegration {
  id             String  @id @default(cuid())
  installationId String  @unique
  userId         String
  isActive       Boolean

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Channel {
  platform     SocialPlatform
  accessToken  String
  expiresIn    DateTime
  accountName  String?
  accountImg   String?
  accountEmail String?
  userId       String
  IDToken      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, platform])
}

model Project {
  id                  String          @id @default(cuid())
  title               String
  description         String
  repositoryUrl       String
  fullName            String
  repoId              String          @unique
  defaultBranch       String
  language            String?
  repositoryUpdatedAt String
  userId              String
  projectUpdate       ProjectUpdate[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectUpdate {
  id          String           @id @default(cuid())
  tagline     String
  description String
  projectId   String
  userId      String
  scheduledAt DateTime
  postedAt    DateTime?
  status      Status
  channel     SocialPlatform[]

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Status {
  DRAFT
  PUBLISHED
  SCHEDULED
}

enum SocialPlatform {
  TWITTER
  LINKEDIN
}
